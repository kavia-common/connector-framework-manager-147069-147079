{"is_source_file": true, "format": "Python", "description": "Implementation of a Confluence connector plugin for Atlassian Confluence, providing methods for metadata retrieval, configuration schema, OAuth authorization URL generation, OAuth callback handling, connection testing, and fetching sample data.", "external_files": ["./base"], "external_methods": ["ConnectorPlugin", "PluginMetadata"], "published": ["ConfluenceConnector"], "classes": [{"name": "ConfluenceConnector", "description": "A plugin class for integrating with Atlassian Confluence, extending the base ConnectorPlugin, providing methods related to metadata, configuration, OAuth, connection testing, and data fetching."}], "methods": [{"name": "PluginMetadata get_metadata(self)", "description": "Returns metadata information for the Confluence plugin, including key, name, and OAuth scopes.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] get_config_schema(self)", "description": "Provides the JSON schema for configuring the Confluence connector, including instance URL and email.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "str authorize_url(self, redirect_uri: str, state: str)", "description": "Generates an OAuth authorization URL for Confluence, incorporating client ID from environment variables, redirect URI, and state.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] handle_oauth_callback(self, code: str, state: str)", "description": "Handles the OAuth callback by exchanging authorization code for tokens (placeholder implementation).", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "bool test_connection(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "description": "Tests the connectivity to the Confluence instance using provided configuration and tokens.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] fetch_sample(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "description": "Fetches sample data such as spaces and recent pages from Confluence (placeholder implementation).", "scope": "ConfluenceConnector", "scopeKind": "class"}], "calls": ["os.getenv", "raise ValueError", "return PluginMetadata", "return { ... }", "async def handle_oauth_callback", "async def test_connection", "async def fetch_sample"], "search-terms": ["confluence", "OAuth", "metadata", "configuration schema", "authorization URL", "sample data", "Atlassian"], "state": 2, "file_id": 20, "knowledge_revision": 80, "git_revision": "", "revision_history": [{"58": ""}, {"80": ""}], "ctags": [{"_type": "tag", "name": "ConfluenceConnector", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/confluence.py", "pattern": "/^class ConfluenceConnector(ConnectorPlugin):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "authorize_url", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/confluence.py", "pattern": "/^    def authorize_url(self, redirect_uri: str, state: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, redirect_uri: str, state: str)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "fetch_sample", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/confluence.py", "pattern": "/^    async def fetch_sample(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "get_config_schema", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/confluence.py", "pattern": "/^    def get_config_schema(self) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "get_metadata", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/confluence.py", "pattern": "/^    def get_metadata(self) -> PluginMetadata:$/", "language": "Python", "typeref": "typename:PluginMetadata", "kind": "member", "signature": "(self)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "handle_oauth_callback", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/confluence.py", "pattern": "/^    async def handle_oauth_callback(self, code: str, state: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, code: str, state: str)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "test_connection", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/confluence.py", "pattern": "/^    async def test_connection(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = N/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "scope": "ConfluenceConnector", "scopeKind": "class"}], "hash": "17a02bc4a89af05e4a7ef9c9e05ae45c", "format-version": 4, "code-base-name": "core_backend", "filename": "core_backend/src/plugins/confluence.py"}