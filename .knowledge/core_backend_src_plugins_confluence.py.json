{"is_source_file": true, "format": "Python", "description": "This file implements a plugin class for connecting to Atlassian Confluence, providing methods for metadata retrieval, configuration schema, OAuth URL generation, OAuth callback handling, connection testing, and sample data fetching.", "external_files": [".base", "src.config"], "external_methods": ["NotConfigured", "settings.confluence_client_id"], "published": ["ConfluenceConnector"], "classes": [{"name": "ConfluenceConnector", "description": "A plugin class enabling integration with Atlassian Confluence, providing OAuth flow, connection testing, and data retrieval functionalities."}], "methods": [{"name": "PluginMetadata get_metadata(self)", "description": "Returns metadata about the Confluence plugin, including key information and OAuth scopes.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] get_config_schema(self)", "description": "Provides the configuration schema required for Confluence connection, including URL and email.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "str authorize_url(self, redirect_uri: str, state: str)", "description": "Generates the OAuth authorization URL for Confluence, incorporating client ID, scopes, and redirect information.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] handle_oauth_callback(self, code: str, state: str)", "description": "Handles the OAuth callback, simulating token exchange and returning mock tokens.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "bool test_connection(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "description": "Tests the connection to Confluence using provided configuration and tokens.", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] fetch_sample(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "description": "Fetches sample data (spaces and recent pages) from Confluence.", "scope": "ConfluenceConnector", "scopeKind": "class"}], "calls": ["settings.confluence_client_id"], "search-terms": ["ConfluenceConnector", "OAuth URL", "OAuth callback", "sample data", "confluence"], "state": 2, "file_id": 20, "knowledge_revision": 133, "git_revision": "2ec6dddd09bed28218dc8f9df2e7ee65406d9d04", "revision_history": [{"58": ""}, {"80": ""}, {"133": "2ec6dddd09bed28218dc8f9df2e7ee65406d9d04"}], "ctags": [{"_type": "tag", "name": "ConfluenceConnector", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/confluence.py", "pattern": "/^class ConfluenceConnector(ConnectorPlugin):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "authorize_url", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/confluence.py", "pattern": "/^    def authorize_url(self, redirect_uri: str, state: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, redirect_uri: str, state: str)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "fetch_sample", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/confluence.py", "pattern": "/^    async def fetch_sample(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "get_config_schema", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/confluence.py", "pattern": "/^    def get_config_schema(self) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "get_metadata", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/confluence.py", "pattern": "/^    def get_metadata(self) -> PluginMetadata:$/", "language": "Python", "typeref": "typename:PluginMetadata", "kind": "member", "signature": "(self)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "handle_oauth_callback", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/confluence.py", "pattern": "/^    async def handle_oauth_callback(self, code: str, state: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, code: str, state: str)", "scope": "ConfluenceConnector", "scopeKind": "class"}, {"_type": "tag", "name": "test_connection", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/confluence.py", "pattern": "/^    async def test_connection(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = N/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "scope": "ConfluenceConnector", "scopeKind": "class"}], "hash": "12e7c9d23c0546cd03ccc481536d9930", "format-version": 4, "code-base-name": "core_backend", "filename": "core_backend/src/plugins/confluence.py"}