{"is_source_file": true, "format": "Python", "description": "This file implements a Figma connector plugin for integration with Figma design tools. It provides methods for retrieving metadata, configuration schema, generating OAuth authorization URL, handling OAuth callback, testing the connection, and fetching sample data.", "external_files": [".base", "src.config"], "external_methods": ["ConnectorPlugin", "PluginMetadata", "NotConfigured"], "published": ["FigmaConnector"], "classes": [{"name": "FigmaConnector", "description": "A plugin class for connecting to the Figma API, inheriting from ConnectorPlugin, providing methods for OAuth flow, testing connection, and fetching sample data."}], "methods": [{"name": "PluginMetadata get_metadata(self)", "description": "Returns metadata about the Figma plugin, including OAuth scopes.", "scope": "FigmaConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] get_config_schema(self)", "description": "Provides the configuration schema for the Figma plugin.", "scope": "FigmaConnector", "scopeKind": "class"}, {"name": "str authorize_url(self, redirect_uri: str, state: str)", "description": "Generates the OAuth authorization URL for Figma.", "scope": "FigmaConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] handle_oauth_callback(self, code: str, state: str)", "description": "Handles the OAuth callback and returns access and refresh tokens.", "scope": "FigmaConnector", "scopeKind": "class"}, {"name": "bool test_connection(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "description": "Tests the connection to Figma with provided tokens.", "scope": "FigmaConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] fetch_sample(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "description": "Fetches sample data from Figma.", "scope": "FigmaConnector", "scopeKind": "class"}], "calls": ["settings.figma_client_id"], "search-terms": ["FigmaConnector", "OAuth", "OAuth URL", "fetch_sample", "metadata", "configuration schema"], "state": 2, "file_id": 23, "knowledge_revision": 136, "git_revision": "2ec6dddd09bed28218dc8f9df2e7ee65406d9d04", "revision_history": [{"64": ""}, {"83": ""}, {"136": "2ec6dddd09bed28218dc8f9df2e7ee65406d9d04"}], "ctags": [{"_type": "tag", "name": "FigmaConnector", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/figma.py", "pattern": "/^class FigmaConnector(ConnectorPlugin):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "authorize_url", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/figma.py", "pattern": "/^    def authorize_url(self, redirect_uri: str, state: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, redirect_uri: str, state: str)", "scope": "FigmaConnector", "scopeKind": "class"}, {"_type": "tag", "name": "fetch_sample", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/figma.py", "pattern": "/^    async def fetch_sample(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "scope": "FigmaConnector", "scopeKind": "class"}, {"_type": "tag", "name": "get_config_schema", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/figma.py", "pattern": "/^    def get_config_schema(self) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self)", "scope": "FigmaConnector", "scopeKind": "class"}, {"_type": "tag", "name": "get_metadata", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/figma.py", "pattern": "/^    def get_metadata(self) -> PluginMetadata:$/", "language": "Python", "typeref": "typename:PluginMetadata", "kind": "member", "signature": "(self)", "scope": "FigmaConnector", "scopeKind": "class"}, {"_type": "tag", "name": "handle_oauth_callback", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/figma.py", "pattern": "/^    async def handle_oauth_callback(self, code: str, state: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, code: str, state: str)", "scope": "FigmaConnector", "scopeKind": "class"}, {"_type": "tag", "name": "test_connection", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/figma.py", "pattern": "/^    async def test_connection(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = N/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "scope": "FigmaConnector", "scopeKind": "class"}], "hash": "04978bb907206d6c6edeec4928b71322", "format-version": 4, "code-base-name": "core_backend", "filename": "core_backend/src/plugins/figma.py"}