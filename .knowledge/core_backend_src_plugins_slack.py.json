{"is_source_file": true, "format": "Python", "description": "This file implements a Slack connector plugin class that provides methods for retrieving metadata, configuration schema, generating OAuth URLs, handling OAuth callbacks, testing connection, and fetching sample data specific to Slack workspace integration.", "external_files": ["./base"], "external_methods": ["ConnectorPlugin", "PluginMetadata"], "published": ["SlackConnector"], "classes": [{"name": "SlackConnector", "description": "A plugin class for Slack that extends ConnectorPlugin to facilitate Slack workspace integration, OAuth authorization, configuration, testing, and sample data retrieval."}], "methods": [{"name": "PluginMetadata get_metadata(self)", "description": "Returns metadata information for the Slack plugin, including key, name, and OAuth scopes.", "scope": "SlackConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] get_config_schema(self)", "description": "Provides the JSON schema for Slack connection configuration, requiring a workspace name.", "scope": "SlackConnector", "scopeKind": "class"}, {"name": "str authorize_url(self, redirect_uri: str, state: str)", "description": "Generates a Slack OAuth authorization URL using client ID, redirect URI, and state.", "scope": "SlackConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] handle_oauth_callback(self, code: str, state: str)", "description": "Processes the OAuth callback by exchanging an authorization code for access tokens (placeholder implementation).", "scope": "SlackConnector", "scopeKind": "class"}, {"name": "bool test_connection(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "description": "Tests the Slack connection by verifying workspace name and tokens (placeholder implementation).", "scope": "SlackConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] fetch_sample(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "description": "Fetches sample Slack data such as channels and user info (placeholder implementation).", "scope": "SlackConnector", "scopeKind": "class"}], "calls": ["os.getenv", "self.metadata.oauth_scopes.join", "self.metadata.oauth_scopes"], "search-terms": ["SlackConnector", "OAuth URL generation", "Slack workspace integration", "Slack OAuth", "fetch_sample", "test_connection"], "state": 2, "file_id": 21, "knowledge_revision": 81, "git_revision": "", "revision_history": [{"60": ""}, {"81": ""}], "ctags": [{"_type": "tag", "name": "SlackConnector", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/slack.py", "pattern": "/^class SlackConnector(ConnectorPlugin):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "authorize_url", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/slack.py", "pattern": "/^    def authorize_url(self, redirect_uri: str, state: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, redirect_uri: str, state: str)", "scope": "SlackConnector", "scopeKind": "class"}, {"_type": "tag", "name": "fetch_sample", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/slack.py", "pattern": "/^    async def fetch_sample(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "scope": "SlackConnector", "scopeKind": "class"}, {"_type": "tag", "name": "get_config_schema", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/slack.py", "pattern": "/^    def get_config_schema(self) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self)", "scope": "SlackConnector", "scopeKind": "class"}, {"_type": "tag", "name": "get_metadata", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/slack.py", "pattern": "/^    def get_metadata(self) -> PluginMetadata:$/", "language": "Python", "typeref": "typename:PluginMetadata", "kind": "member", "signature": "(self)", "scope": "SlackConnector", "scopeKind": "class"}, {"_type": "tag", "name": "handle_oauth_callback", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/slack.py", "pattern": "/^    async def handle_oauth_callback(self, code: str, state: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, code: str, state: str)", "scope": "SlackConnector", "scopeKind": "class"}, {"_type": "tag", "name": "test_connection", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/slack.py", "pattern": "/^    async def test_connection(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = N/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "scope": "SlackConnector", "scopeKind": "class"}], "hash": "bc5130c2b3334c010bfa4eb0db9b13da", "format-version": 4, "code-base-name": "core_backend", "filename": "core_backend/src/plugins/slack.py"}