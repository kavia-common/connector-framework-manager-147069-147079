{"is_source_file": true, "format": "Python", "description": "Source code for a Jira connector plugin implementation, defining the JiraConnector class that handles metadata retrieval, configuration schema, OAuth authorization URL generation, OAuth callback handling, connection testing, and sample data fetching.", "external_files": ["./base.py"], "external_methods": [], "published": ["JiraConnector"], "classes": [{"name": "JiraConnector", "description": "A class implementing the ConnectorPlugin interface for Atlassian Jira integration, providing methods to retrieve metadata, configuration schema, generate OAuth URLs, handle OAuth callback, test connection, and fetch sample data."}], "methods": [{"name": "PluginMetadata get_metadata(self)", "description": "Retrieves metadata information about the Jira plugin, including its key, name, and OAuth scopes.", "scope": "JiraConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] get_config_schema(self)", "description": "Provides the configuration schema for setting up Jira integration, requiring instance URL and email.", "scope": "JiraConnector", "scopeKind": "class"}, {"name": "str authorize_url(self, redirect_uri: str, state: str)", "description": "Generates the OAuth authorization URL for Jira OAuth flow, using environment variable for client ID and including necessary parameters.", "scope": "JiraConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] handle_oauth_callback(self, code: str, state: str)", "description": "Handles the OAuth callback from Jira, intended to exchange the authorization code for tokens (placeholder implementation).", "scope": "JiraConnector", "scopeKind": "class"}, {"name": "bool test_connection(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "description": "Tests the connection to Jira using provided configuration and tokens (placeholder implementation).", "scope": "JiraConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] fetch_sample(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "description": "Fetches sample Jira data such as projects and recent issues (placeholder implementation).", "scope": "JiraConnector", "scopeKind": "class"}], "calls": ["os.getenv", "self.metadata.oauth_scopes", "raise ValueError", "async def handle_oauth_callback", "async def test_connection", "async def fetch_sample"], "search-terms": ["JiraConnector", "OAuth authorization URL", "OAuth callback", "Jira plugin metadata", "Jira configuration schema"], "state": 2, "file_id": 19, "knowledge_revision": 79, "git_revision": "", "revision_history": [{"56": ""}, {"79": ""}], "ctags": [{"_type": "tag", "name": "JiraConnector", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/jira.py", "pattern": "/^class JiraConnector(ConnectorPlugin):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "authorize_url", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/jira.py", "pattern": "/^    def authorize_url(self, redirect_uri: str, state: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, redirect_uri: str, state: str)", "scope": "JiraConnector", "scopeKind": "class"}, {"_type": "tag", "name": "fetch_sample", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/jira.py", "pattern": "/^    async def fetch_sample(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "scope": "JiraConnector", "scopeKind": "class"}, {"_type": "tag", "name": "get_config_schema", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/jira.py", "pattern": "/^    def get_config_schema(self) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self)", "scope": "JiraConnector", "scopeKind": "class"}, {"_type": "tag", "name": "get_metadata", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/jira.py", "pattern": "/^    def get_metadata(self) -> PluginMetadata:$/", "language": "Python", "typeref": "typename:PluginMetadata", "kind": "member", "signature": "(self)", "scope": "JiraConnector", "scopeKind": "class"}, {"_type": "tag", "name": "handle_oauth_callback", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/jira.py", "pattern": "/^    async def handle_oauth_callback(self, code: str, state: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, code: str, state: str)", "scope": "JiraConnector", "scopeKind": "class"}, {"_type": "tag", "name": "test_connection", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/jira.py", "pattern": "/^    async def test_connection(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = N/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "scope": "JiraConnector", "scopeKind": "class"}], "hash": "3c22e55d0e7220c217171f152300edeb", "format-version": 4, "code-base-name": "core_backend", "filename": "core_backend/src/plugins/jira.py"}