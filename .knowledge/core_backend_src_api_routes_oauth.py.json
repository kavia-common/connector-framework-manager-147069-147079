{"is_source_file": true, "format": "Python", "description": "This file defines REST API routes for OAuth authorization flows using FastAPI. It includes endpoints for initiating OAuth authorization, handling OAuth callbacks via GET and POST, and revoking OAuth tokens. The code integrates with database models, plugin manager, and OAuth helpers to facilitate OAuth flows and token management.", "external_files": ["src/database/connection.py", "src/models/connection.py", "src/models/oauth_token.py", "src/services/plugin_manager.py", "src/auth/jwt.py", "src/auth/oauth.py", "src/api/schemas.py"], "external_methods": ["get_current_user_optional", "plugin_manager.get_plugin", "oauth_helper.generate_state", "oauth_helper.build_redirect_uri", "plugin.authorize_url", "plugin.handle_oauth_callback", "db.query", "db.add", "db.commit", "db.query(OAuthToken).filter", "db.query(Connection).filter", "db.query(OAuthToken).delete", "db.query(Connection).delete"], "published": ["initiate_oauth", "handle_oauth_callback_get", "handle_oauth_callback_post", "_process_oauth_callback", "revoke_oauth_token"], "classes": [{"name": "OAuthAuthorizeResponse", "description": "Response schema containing authorization URL and state for initiating OAuth."}, {"name": "OAuthCallbackRequest", "description": "Schema for OAuth callback data received via POST."}, {"name": "OAuthCallbackResponse", "description": "Schema indicating success or failure of OAuth callback processing."}], "methods": [{"name": "Optional[Dict[str,Any]] get_current_user(authorization: Optional[str] = Header(None))", "description": "Extracts current user information from the authorization header.", "scope": "", "scopeKind": ""}, {"name": "initiate_oauth( connector_key: str, connection_id: Optional[int] = Query(None, description=\"Existing connection ID to associate with OAuth\"), current_user: Optional[Dict[str, Any]] = Depends(get_current_user), db: Session = Depends(get_db) )", "description": "Starts the OAuth authorization process by generating an authorization URL and state.", "scope": "", "scopeKind": ""}, {"name": "handle_oauth_callback_get( connector_key: str, code: Optional[str] = Query(None), state: Optional[str] = Query(None), error: Optional[str] = Query(None), error_description: Optional[str] = Query(None), db: Session = Depends(get_db) )", "description": "Handles the OAuth callback via GET request, forwarding to processing function.", "scope": "", "scopeKind": ""}, {"name": "handle_oauth_callback_post( connector_key: str, callback_data: OAuthCallbackRequest, db: Session = Depends(get_db) )", "description": "Handles OAuth callback via POST request, forwarding to processing function.", "scope": "", "scopeKind": ""}, {"name": "OAuthCallbackResponse _process_oauth_callback( connector_key: str, code: Optional[str], state: Optional[str], error: Optional[str] = None, error_description: Optional[str] = None, connection_id: Optional[int] = None, db: Session = None )", "description": "Core function to process OAuth callback, exchange code for token, store token, and respond.", "scope": "", "scopeKind": ""}, {"name": "revoke_oauth_token( connector_key: str, connection_id: int, current_user: Optional[Dict[str, Any]] = Depends(get_current_user), db: Session = Depends(get_db) )", "description": "Revokes stored OAuth tokens for a given connection, marking connection inactive.", "scope": "", "scopeKind": ""}], "calls": ["plugin_manager.get_plugin", "oauth_helper.generate_state", "oauth_helper.build_redirect_uri", "plugin.authorize_url", "plugin.handle_oauth_callback", "db.query", "db.add", "db.commit", "db.query(OAuthToken).filter", "db.query(Connection).filter", "db.query(OAuthToken).delete", "db.query(Connection).delete"], "search-terms": ["OAuth routes", "OAuth authorization flow", "OAuth callback handling", "FastAPI OAuth endpoints", "OAuth token revocation", "plugin_manager", "oauth_helper"], "state": 2, "file_id": 34, "knowledge_revision": 113, "git_revision": "", "revision_history": [{"102": ""}, {"109": ""}, {"113": ""}], "ctags": [{"_type": "tag", "name": "_process_oauth_callback", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/api/routes/oauth.py", "pattern": "/^async def _process_oauth_callback($/", "language": "Python", "typeref": "typename:OAuthCallbackResponse", "kind": "function", "signature": "( connector_key: str, code: Optional[str], state: Optional[str], error: Optional[str] = None, error_description: Optional[str] = None, connection_id: Optional[int] = None, db: Session = None )"}, {"_type": "tag", "name": "get_current_user", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/api/routes/oauth.py", "pattern": "/^def get_current_user(authorization: Optional[str] = Header(None)) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "function", "signature": "(authorization: Optional[str] = Header(None))"}, {"_type": "tag", "name": "handle_oauth_callback_get", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/api/routes/oauth.py", "pattern": "/^async def handle_oauth_callback_get($/", "language": "Python", "kind": "function", "signature": "( connector_key: str, code: Optional[str] = Query(None), state: Optional[str] = Query(None), error: Optional[str] = Query(None), error_description: Optional[str] = Query(None), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "handle_oauth_callback_post", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/api/routes/oauth.py", "pattern": "/^async def handle_oauth_callback_post($/", "language": "Python", "kind": "function", "signature": "( connector_key: str, callback_data: OAuthCallbackRequest, db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "initiate_oauth", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/api/routes/oauth.py", "pattern": "/^async def initiate_oauth($/", "language": "Python", "kind": "function", "signature": "( connector_key: str, connection_id: Optional[int] = Query(None, description=\"Existing connection ID to associate with OAuth\"), current_user: Optional[Dict[str, Any]] = Depends(get_current_user), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "revoke_oauth_token", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/api/routes/oauth.py", "pattern": "/^async def revoke_oauth_token($/", "language": "Python", "kind": "function", "signature": "( connector_key: str, connection_id: int, current_user: Optional[Dict[str, Any]] = Depends(get_current_user), db: Session = Depends(get_db) )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/api/routes/oauth.py", "pattern": "/^router = APIRouter(prefix=\"\\/oauth\", tags=[\"oauth\"])$/", "language": "Python", "kind": "variable"}], "hash": "a44dec5c61afef7173a628439f123b52", "format-version": 4, "code-base-name": "core_backend", "filename": "core_backend/src/api/routes/oauth.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/oauth\", tags=[\"oauth\"])", "scope": "", "scopeKind": "", "description": "unavailable"}]}