{"is_source_file": true, "format": "Python", "description": "This is a Python source file implementing a plugin for Notion integration within a larger connector framework. It defines a class 'NotionConnector' that provides methods for obtaining metadata, configuration schema, OAuth URL generation, handling OAuth callback, testing connection, and fetching sample data from Notion. The class utilizes environment variables for client ID and returns placeholder data for certain operations.", "external_files": [".base"], "external_methods": ["ConnectorPlugin", "PluginMetadata"], "published": [], "classes": [{"name": "NotionConnector", "description": "A plugin class for integrating with Notion workspace, providing OAuth, configuration, and data fetching functionalities."}], "methods": [{"name": "PluginMetadata get_metadata(self)", "description": "Returns metadata about the Notion plugin, such as key, name, and OAuth scopes.", "scope": "NotionConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] get_config_schema(self)", "description": "Provides the configuration schema required for setting up the Notion connector, e.g., workspace name.", "scope": "NotionConnector", "scopeKind": "class"}, {"name": "str authorize_url(self, redirect_uri: str, state: str)", "description": "Generates the OAuth authorization URL for Notion, including client ID, redirect URI, and state.", "scope": "NotionConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] handle_oauth_callback(self, code: str, state: str)", "description": "Handles OAuth callback, returning access token details based on provided code and state.", "scope": "NotionConnector", "scopeKind": "class"}, {"name": "bool test_connection(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "description": "Tests the connectivity to Notion using provided configuration and tokens.", "scope": "NotionConnector", "scopeKind": "class"}, {"name": "Dict[str,Any] fetch_sample(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "description": "Retrieves sample data such as databases and pages from Notion.", "scope": "NotionConnector", "scopeKind": "class"}], "calls": ["os.getenv", "ValueError", "os.getenv", "async def handle_oauth_callback", "async def test_connection", "async def fetch_sample"], "search-terms": ["notion connector", "OAuth URL generation", "Notion API", "Notion workspace integration", "Notion plugin", "fetch sample data", "OAuth callback handling"], "state": 2, "file_id": 22, "knowledge_revision": 82, "git_revision": "", "revision_history": [{"62": ""}, {"82": ""}], "ctags": [{"_type": "tag", "name": "NotionConnector", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/notion.py", "pattern": "/^class NotionConnector(ConnectorPlugin):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "authorize_url", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/notion.py", "pattern": "/^    def authorize_url(self, redirect_uri: str, state: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, redirect_uri: str, state: str)", "scope": "NotionConnector", "scopeKind": "class"}, {"_type": "tag", "name": "fetch_sample", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/notion.py", "pattern": "/^    async def fetch_sample(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "scope": "NotionConnector", "scopeKind": "class"}, {"_type": "tag", "name": "get_config_schema", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/notion.py", "pattern": "/^    def get_config_schema(self) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self)", "scope": "NotionConnector", "scopeKind": "class"}, {"_type": "tag", "name": "get_metadata", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/notion.py", "pattern": "/^    def get_metadata(self) -> PluginMetadata:$/", "language": "Python", "typeref": "typename:PluginMetadata", "kind": "member", "signature": "(self)", "scope": "NotionConnector", "scopeKind": "class"}, {"_type": "tag", "name": "handle_oauth_callback", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/notion.py", "pattern": "/^    async def handle_oauth_callback(self, code: str, state: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, code: str, state: str)", "scope": "NotionConnector", "scopeKind": "class"}, {"_type": "tag", "name": "test_connection", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/notion.py", "pattern": "/^    async def test_connection(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = N/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "scope": "NotionConnector", "scopeKind": "class"}], "hash": "20e4a03851ee19e1d9f2afd5c735b332", "format-version": 4, "code-base-name": "core_backend", "filename": "core_backend/src/plugins/notion.py"}