{"is_source_file": true, "format": "Python", "description": "This file defines an abstract base class for connector plugins in a software system, including metadata management, OAuth authentication procedures, connection testing, data fetching, and optional action execution. It uses Python's abc module for defining abstract methods and pydantic for data validation.", "external_files": ["abc", "typing", "pydantic"], "external_methods": ["ABC", "abstractmethod", "BaseModel"], "published": ["PluginMetadata", "ConnectorPlugin"], "classes": [{"name": "PluginMetadata", "description": "Data model representing connector plugin metadata, including key, name, and OAuth scopes."}, {"name": "ConnectorPlugin", "description": "Abstract base class for connector plugins, enforcing implementation of core methods for plugin integration, such as metadata retrieval, configuration schema, OAuth URL generation, callback handling, connection testing, data fetching, and optional actions."}], "methods": [{"name": "PluginMetadata metadata(self)", "description": "Property that returns the plugin metadata instance.", "scope": "ConnectorPlugin", "scopeKind": "class"}, {"name": "PluginMetadata get_metadata(self)", "description": "Abstract method that subclasses must implement to provide plugin metadata.", "scope": "ConnectorPlugin", "scopeKind": "class"}, {"name": "Dict[str,Any] get_config_schema(self)", "description": "Abstract method to return the JSON schema for plugin configuration parameters.", "scope": "ConnectorPlugin", "scopeKind": "class"}, {"name": "str authorize_url(self, redirect_uri: str, state: str)", "description": "Abstract method to generate the OAuth authorization URL.", "scope": "ConnectorPlugin", "scopeKind": "class"}, {"name": "Dict[str,Any] handle_oauth_callback(self, code: str, state: str)", "description": "Async abstract method to handle OAuth callback and exchange code for tokens.", "scope": "ConnectorPlugin", "scopeKind": "class"}, {"name": "bool test_connection(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "description": "Async abstract method to test connection to external service.", "scope": "ConnectorPlugin", "scopeKind": "class"}, {"name": "Dict[str,Any] fetch_sample(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "description": "Async abstract method to fetch sample data for verification purposes.", "scope": "ConnectorPlugin", "scopeKind": "class"}, {"name": "Dict[str,Any] execute_action(self, action: str, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None, **kwargs)", "description": "Async method to execute a specific action; raises NotImplementedError if not overridden.", "scope": "ConnectorPlugin", "scopeKind": "class"}, {"name": "__init__(self)", "scope": "ConnectorPlugin", "scopeKind": "class", "description": "unavailable"}], "calls": ["self.get_metadata()", "not implemented methods in subclasses"], "search-terms": ["ConnectorPlugin", "OAuth", "get_config_schema", "execute_action", "abstract base class", "PluginMetadata"], "state": 2, "file_id": 18, "knowledge_revision": 78, "git_revision": "", "revision_history": [{"54": ""}, {"78": ""}], "ctags": [{"_type": "tag", "name": "ConnectorPlugin", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/base.py", "pattern": "/^class ConnectorPlugin(ABC):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "PluginMetadata", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/base.py", "pattern": "/^class PluginMetadata(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/base.py", "pattern": "/^    def __init__(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "ConnectorPlugin", "scopeKind": "class"}, {"_type": "tag", "name": "authorize_url", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/base.py", "pattern": "/^    def authorize_url(self, redirect_uri: str, state: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, redirect_uri: str, state: str)", "scope": "ConnectorPlugin", "scopeKind": "class"}, {"_type": "tag", "name": "execute_action", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/base.py", "pattern": "/^    async def execute_action(self, action: str, config: Dict[str, Any], tokens: Optional[Dict[st/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, action: str, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None, **kwargs)", "scope": "ConnectorPlugin", "scopeKind": "class"}, {"_type": "tag", "name": "fetch_sample", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/base.py", "pattern": "/^    async def fetch_sample(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "scope": "ConnectorPlugin", "scopeKind": "class"}, {"_type": "tag", "name": "get_config_schema", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/base.py", "pattern": "/^    def get_config_schema(self) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self)", "scope": "ConnectorPlugin", "scopeKind": "class"}, {"_type": "tag", "name": "get_metadata", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/base.py", "pattern": "/^    def get_metadata(self) -> PluginMetadata:$/", "language": "Python", "typeref": "typename:PluginMetadata", "kind": "member", "signature": "(self)", "scope": "ConnectorPlugin", "scopeKind": "class"}, {"_type": "tag", "name": "handle_oauth_callback", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/base.py", "pattern": "/^    async def handle_oauth_callback(self, code: str, state: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "member", "signature": "(self, code: str, state: str)", "scope": "ConnectorPlugin", "scopeKind": "class"}, {"_type": "tag", "name": "metadata", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/base.py", "pattern": "/^    def metadata(self) -> PluginMetadata:$/", "language": "Python", "typeref": "typename:PluginMetadata", "kind": "member", "signature": "(self)", "scope": "ConnectorPlugin", "scopeKind": "class"}, {"_type": "tag", "name": "test_connection", "path": "/home/kavia/workspace/code-generation/connector-framework-manager-147069-147079/core_backend/src/plugins/base.py", "pattern": "/^    async def test_connection(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = N/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, config: Dict[str, Any], tokens: Optional[Dict[str, Any]] = None)", "scope": "ConnectorPlugin", "scopeKind": "class"}], "hash": "c73b85cb940246f790473d5968c18c4b", "format-version": 4, "code-base-name": "core_backend", "filename": "core_backend/src/plugins/base.py"}